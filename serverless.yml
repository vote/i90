service: i90

frameworkVersion: ">=1.1.0 <2.0.0"

custom:
  stage: ${opt:stage, env:STAGE, "dev"}

  deploy:
    bucket_name: ${ssm:/i90/DEPLOYMENT_BUCKET_NAME~true}

  pythonRequirements:
    dockerizePip: true
    slim: true
    layer: true
    useDownloadCache: false
    useStaticCache: false

  environment:
    STAGE: ${self:custom.stage}
    MY_PROTOCOL: https
    TOKEN_BYTE_LENGTH: 10
    MY_HOST: "${ssm:/i90/${self:custom.stage}/HOST~true}"
    REDIRECTS_TABLE: "${ssm:/i90/${self:custom.stage}/redirects_table/name~true}"
    TRACKING_STREAM: "${ssm:/i90/${self:custom.stage}/kinesis_firehose/name~true}"

  layers:
    - {Ref: PythonRequirementsLambdaLayer}

#  TODO
#  alerts:
#    nameTemplate: $[functionName]-$[metricName]-Alarm
#    topics:
#      alarm:
#        topic: ${ssm:/${self:custom.stage}/sns/alarms/name~true}
#    definitions:
#      functionInvocations:
#        threshold: 5000
#      functionDuration:
#        threshold: 1000
#    alarms:
#      - functionThrottles
#      - functionErrors
#      - functionInvocations
#      - functionDuration

provider:
  name: aws
  runtime: python3.7
  region: ${opt:region, env:REGION, "us-east-1"}
  stage: ${self:custom.stage}
  deploymentBucket:
    name: ${self:custom.deploy.bucket_name}
    blockPublicAccess: true
  apiKeys:
    - ${self:custom.stage}-i90-default
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "dynamodb:*"
      Resource:
        - "${ssm:/i90/${self:custom.stage}/redirects_table/arn~true}"
    - Effect: Allow
      Action:
        - "firehose:PutRecord"
      Resource:
        - "${ssm:/i90/${self:custom.stage}/kinesis_firehose/arn~true}"
  environment: ${self:custom.environment}

package:
  excludeDevDependencies: true
  individually: false
  exclude:
    - ".pytest_cache/**"
    - "node_modules/**"
    - ".vscode/**"

functions:
  redirects:
    name: ${self:custom.stage}-i90-redirect
    handler: handlers.redirect
    layers: ${self:custom.layers}
    events:
      - http:
          method: GET
          path: /
      - http:
          method: GET
          path: /{token}
      - schedule:
          rate: rate(4 minutes)
  get-json:
    name: ${self:custom.stage}-i90-get-json
    handler: handlers.get_redirect
    layers: ${self:custom.layers}
    events:
      - http:
          method: GET
          path: v1/redirect/{token}
          private: true
      - schedule:
          rate: rate(4 minutes)
  claim:
    name: ${self:custom.stage}-i90-claim
    handler: handlers.claim
    layers: ${self:custom.layers}
    events:
      - http:
          method: POST
          path: v1/claim
          private: true
      - schedule:
          rate: rate(4 minutes)
  conceive:
    name: ${self:custom.stage}-i90-conceive
    handler: handlers.conceive
    layers: ${self:custom.layers}
    events:
      - http:
          method: POST
          path: v1/conceive
          private: true
      - schedule:
          rate: rate(4 minutes)

plugins:
  - serverless-python-requirements
